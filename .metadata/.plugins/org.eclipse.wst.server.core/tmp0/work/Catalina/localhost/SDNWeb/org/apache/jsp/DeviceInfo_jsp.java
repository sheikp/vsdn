/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.32
 * Generated at: 2016-03-31 12:58:51 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class DeviceInfo_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"assets/css/main.css\" />\r\n");
      out.write("\t <link rel=\"stylesheet\" href=\"http://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css\">\r\n");
      out.write("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js\"></script>     \r\n");
      out.write("<script>\r\n");
      out.write("\r\n");
      out.write("$(document).ready(function(){\t\r\n");
      out.write("\t\r\n");
      out.write("\t$.ajax({\t\t\t\r\n");
      out.write("   \t \turl: \"http://localhost:8080/SDNWeb/DevicesServlet\",\r\n");
      out.write("        type: \"GET\",               \r\n");
      out.write("        success: function (data) { \r\n");
      out.write("        \tvar obj = $.parseJSON(data);\r\n");
      out.write("        \tvar table1 = '';\r\n");
      out.write("        \tvar table2 = '';\r\n");
      out.write("        \t$.each(obj, function() {                \r\n");
      out.write("                table1 += '<span><b>Device Type:</b> ' + this[0]['type'] + '<br><b>Hardware Vendor: </b>Edge-Core Network <br><b>Device Model: </b>AS4600-54T<br><b>Software:</b> ' + this[0]['hw'] + ' ' + this[0]['sw'] + '</span>';                \r\n");
      out.write("                $('#deviceid').value = this[0]['id'];   \r\n");
      out.write("                $.ajax({\t\t\t\r\n");
      out.write("               \t \turl: \"http://localhost:8080/SDNWeb/PortsServlet\",\r\n");
      out.write("                    type: \"GET\",               \r\n");
      out.write("                    data: {\"deviceid\": this[0]['id']},\r\n");
      out.write("                    success: function (data) {                    \t\r\n");
      out.write("                    \tvar obj = $.parseJSON(data); \r\n");
      out.write("                    \tvar portcount = 0;\r\n");
      out.write("                    \t$.each(obj.ports, function() {      \r\n");
      out.write("                    \t\tif(this['port'] != 'local')\r\n");
      out.write("                    \t\t\tportcount ++;\r\n");
      out.write("                    \t});\r\n");
      out.write("                    \t\r\n");
      out.write("                    \ttable2 += '<h4>No. of Active Ports: ' + portcount + '</h4>';\r\n");
      out.write("                    \ttable2 += '<table class=\"table\"><tr><th>Port Name</th><th>Physical Port Speed(Mbps)</th></tr>';\r\n");
      out.write("                    \t$.each(obj.ports, function() {      \r\n");
      out.write("                    \t\tif(this['port'] != 'local')\r\n");
      out.write("                    \t\t\t{\r\n");
      out.write("                    \t\t\t table2 += '<tr><td>' + this['annotations']['portName'] + '</td><td>' + this['portSpeed'] + '</td></tr>';\t\t\r\n");
      out.write("                    \t\t\t}     \r\n");
      out.write("                        });\r\n");
      out.write("                    \t$('#jsonPorts').html(table2);\r\n");
      out.write("                    },\r\n");
      out.write("                    error: function (xhr, ajaxOptions, thrownError) { //Add these parameters to display the required response\r\n");
      out.write("                        alert(xhr.statusText);\r\n");
      out.write("                        alert(xhr.responseText);\r\n");
      out.write("                    }\r\n");
      out.write("                });\r\n");
      out.write("                \r\n");
      out.write("            });        \t\r\n");
      out.write("        \ttable1 += '<br> <br> <img src=\"images/switch.jpg\" width=\"250px\">';\r\n");
      out.write("        \t\r\n");
      out.write("            $('#jsonDevice').html(table1);\r\n");
      out.write("            \r\n");
      out.write("        },\r\n");
      out.write("        error: function (xhr, ajaxOptions, thrownError) { //Add these parameters to display the required response\r\n");
      out.write("            alert(xhr.statusText);\r\n");
      out.write("            alert(xhr.responseText);\r\n");
      out.write("        }\r\n");
      out.write("    });\t\r\n");
      out.write("\talert(sdeviceid);\r\n");
      out.write("\t\r\n");
      out.write("\t     \r\n");
      out.write("});\r\n");
      out.write("\t\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("\t<div id=\"bw\" style=\"padding:30px; background-color:white; width:100%;  \">\r\n");
      out.write("\t\t<div style=\"color:maroon\"><h3>Device</h3></div>\r\n");
      out.write("\t\t<input id=deviceid type=hidden value='' />\r\n");
      out.write("\t\t<div id=\"jsonDevice\" style=\"width:50%; float:left\"></div>\r\n");
      out.write("\t\t<div id=\"jsonPorts\" style=\"width:50%; float:left\"></div>\r\n");
      out.write("\t</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
